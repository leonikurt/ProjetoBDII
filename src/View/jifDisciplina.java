/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Connector.HibernateUtil;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Aluno;
import model.Departamento;
import model.Disciplina;
import model.Professor;
import model.Usuario;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

/**
 *
 * @author Casa
 */
public class jifDisciplina extends javax.swing.JInternalFrame {

    /**
     * Creates new form jifDisciplina
     */
    public Professor[] profs = new Professor[100];
    public Departamento[] dt = new Departamento[100];

    private Usuario user;

    public jifDisciplina() {
        initComponents();
        getAll();
        allProfessores();
//        allDepartamentos();
    }

    public jifDisciplina(Usuario user) {
        initComponents();
        this.user = user;
        CheckUser();
        getAll();
        allProfessores();
//        allDepartamentos();
    }

    public void CheckUser() {
        String tipo = this.user.getTipo();
        if (tipo.compareTo("comum") == 0 || tipo.compareTo("dcomum") == 0) {
            jBtCadastrar.setEnabled(false);
            jBtRemover.setEnabled(false);
        }

    }

    public void getAll() {
        String sql = "from Disciplina d";

        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        Query query = session.createQuery(sql);
        List<Disciplina> results = (List<Disciplina>) query.list();

        for (Disciplina d : results) {
            jCbDisciplinas.addItem(d);
        }

        session.close();
    }

    public void allProfessores() {
        String sql = "from Professor p";

        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        Query query = session.createQuery(sql);
        List<Professor> results = (List<Professor>) query.list();

        int index = 0;
        jCbProfessores.addItem(null);
        for (Professor d : results) {
            this.profs[index] = d;
            jCbProfessores.addItem(d.getNome());
            index++;
        }

        session.close();
    }

    public boolean checkFields() {
        boolean resp = false;

        if (jTfNome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite o nome!");
        } else if (jTfCarga.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite a carga horaria!");
        } else if (jTfCreditos.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite os creditos!");
        } else if (jCbProfessores.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Escolha o professor!");
        } else {
            resp = true;
        }

        return resp;
    }

//    public void allDepartamentos() {
//        String sql = "from Departamento d";
//
//        SessionFactory sf = HibernateUtil.getSessionFactory();
//        Session session = sf.openSession();
//        Query query = session.createQuery(sql);
//        List<Departamento> results = (List<Departamento>) query.list();
//        int index = 0;
//        for (Departamento d : results) {
//            this.dt[index] = d;
//            jCbDepartamento.addItem(d.getNome());
//        }
//
//        session.close();
//    }
    public String createSQLSelect() {
        String sql = "Select d from Disciplina d ";
        String where = " where ";
        String join = " ";
        boolean whereFlag = false;
        if (!jTfNome.getText().isEmpty()) {
            where = where + " d.nome = '" + jTfNome.getText() + "'";
            whereFlag = true;
        }
        if (!jTfCarga.getText().isEmpty()) {
            if (whereFlag) {
                where = where + " and ";
            }
            where = where + " d.carga_horaria = '" + jTfCarga.getText() + "'";
            whereFlag = true;
        }
        if (!jTfCreditos.getText().isEmpty()) {
            if (whereFlag) {
                where = where + " and ";
            }
            where = where + " d.creditos = " + jTfCreditos.getText();
            whereFlag = true;
        }

        if (whereFlag) {
            sql = sql + where;
        }
//        JOptionPane.showMessageDialog(null,sql);
        return sql;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTfNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTfCarga = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTfCreditos = new javax.swing.JTextField();
        jCbProfessores = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jBtCadastrar = new javax.swing.JButton();
        jBtConsultar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDisciplinas = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jCbDisciplinas = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jBtRemover = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setText("Nome : ");

        jLabel2.setText("Carga Horaria :");

        jLabel3.setText("Creditos :");

        jLabel4.setText("Professor :");

        jBtCadastrar.setText("Cadastrar/Alterar");
        jBtCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCadastrarActionPerformed(evt);
            }
        });

        jBtConsultar.setText("Consultar");
        jBtConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConsultarActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jScrollPane1.setViewportView(jListDisciplinas);

        jButton1.setText("Selecionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jBtRemover.setText("Remover");
        jBtRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtRemoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jTfCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTfCreditos)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jBtCadastrar)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtConsultar)))
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jCbDisciplinas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jCbProfessores, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTfCarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTfCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCbProfessores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtCadastrar)
                            .addComponent(jBtConsultar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jCbDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtRemover))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConsultarActionPerformed
        DefaultListModel lista = new DefaultListModel();
        String sql = createSQLSelect();
        if (sql.isEmpty()) {
            sql = "from Disciplina d";
        }
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        Query query = session.createQuery(sql);

        List<Disciplina> results = (List<Disciplina>) query.list();
        for (Disciplina d : results) {
            lista.addElement(d.getNome());
        }

        jListDisciplinas.setModel(lista);

        session.close();
    }//GEN-LAST:event_jBtConsultarActionPerformed

    private void jBtCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCadastrarActionPerformed
        if (checkFields()) {
            try {

                SessionFactory af = HibernateUtil.getSessionFactory();
                Session session = af.openSession();
                try {
                    Disciplina a = new Disciplina();
                    a.setNome(jTfNome.getText());
                    a.setCarga_horaria(Integer.parseInt(jTfCarga.getText()));
                    a.setCreditos(Integer.parseInt(jTfCreditos.getText()));

                    Professor p = new Professor();
                    String name = jCbProfessores.getSelectedItem().toString();
                    int tam = jCbProfessores.getItemCount();
                    for (int index = 0; index < tam; index++) {
                        if (this.profs[index].getNome().compareTo(name) == 0) {
                            p = this.profs[index];
                            break;
                        }
                    }

                    a.setCfe_professor(p.getCFE());

                    Transaction tx = session.beginTransaction();

                    session.saveOrUpdate(a);                    

                    tx.commit();
                    JOptionPane.showMessageDialog(null, "Disciplina cadastrada!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                    af.getCurrentSession().getTransaction().rollback();
                } finally {
                    session.flush();
                    session.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ococrreu um erro fatal!");
            }
        }
    }//GEN-LAST:event_jBtCadastrarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Disciplina a = (Disciplina) jCbDisciplinas.getSelectedItem();
//        JOptionPane.showMessageDialog(null, a.getNome());
        jTfNome.setText(a.getNome());
        jTfCreditos.setText(String.valueOf(a.getCreditos()));
        jTfCarga.setText(String.valueOf(a.getCarga_horaria()));


        int tam = jCbProfessores.getItemCount();

        for (int index = 0; index < tam; index++) {
            if (this.profs[index].getCFE().compareTo(a.getCfe_professor()) == 0 ) {
                
                jCbProfessores.setSelectedIndex(index+1);
                break;
                
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBtRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtRemoverActionPerformed
       try {
            SessionFactory af = HibernateUtil.getSessionFactory();
            Session session = af.openSession();
            Transaction tx = session.beginTransaction();

            try {
                Disciplina a = (Disciplina) jCbDisciplinas.getSelectedItem();
                if (a != null) {

                    String hql = "DELETE FROM Disciplina "
                            + "WHERE codigo = :codigo";

                    Query query = session.createQuery(hql);
                    query.setInteger("codigo", a.getCodigo());

                    int result = query.executeUpdate();

                    if (result > 0) {
                        JOptionPane.showMessageDialog(null, "Disciplina removida");
                    } else {
                        throw new Exception("Houve um problema na remoção");

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Selecione uma Disciplina");
                }
                tx.commit();
            } catch (Exception e) {
                af.getCurrentSession().getTransaction().rollback();
            } finally {
                session.flush();
                session.close();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());

        }
    }//GEN-LAST:event_jBtRemoverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtCadastrar;
    private javax.swing.JButton jBtConsultar;
    private javax.swing.JButton jBtRemover;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<Object> jCbDisciplinas;
    private javax.swing.JComboBox<Object> jCbProfessores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListDisciplinas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTfCarga;
    private javax.swing.JTextField jTfCreditos;
    private javax.swing.JTextField jTfNome;
    // End of variables declaration//GEN-END:variables
}
